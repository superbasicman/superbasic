// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // bcrypt hashed for credentials provider; null for OAuth users
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  apiKeys       ApiKey[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timezone  String   @default("UTC")
  currency  String   @default("USD")
  settings  Json?    // JSONB for flexible user preferences
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  apiKeys   ApiKey[]
  
  @@map("profiles")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String    // Auth.js user reference (for authentication)
  profileId   String?   // Business logic owner (personal tokens)
  workspaceId String?   // Workspace-scoped tokens (future use)
  name        String    // User-provided description
  keyHash     String    @unique // SHA-256 hash of the plaintext token
  last4       String    // Last 4 chars of plaintext token (for display)
  scopes      Json      @default("[]") // Array of permission strings
  lastUsedAt  DateTime? // Updated on each successful authentication
  expiresAt   DateTime? // Token expiration timestamp
  revokedAt   DateTime? // Soft delete timestamp
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name]) // Prevent duplicate names per user
  @@index([userId])
  @@index([profileId])
  @@index([workspaceId])
  @@index([keyHash])
  @@index([revokedAt]) // Partial index for active tokens
  @@map("api_keys")
}
